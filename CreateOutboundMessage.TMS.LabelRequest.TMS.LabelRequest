import java.util.HashMap; import java.text.SimpleDateFormat; import java.text.DateFormat; import java.util.Date; import java.util.Calendar; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; //CUSTOM-FASSTO T-142689-149812 Site site = shipment.getShipFrom(); SOLH solh = shipment.getSOLH(); Site req = solh.getRequester(); Carrier car = shipment.getCarrier(); ShippingServiceLevel ssl = shipment.getShippingServiceLevel(); Contact con = site.getPrimaryContact(); Address add = site.getPrimaryAddress(); Address shipToAdd = shipment.getShipToAddress(); // 149833 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); Date pickDate = solh.getRequiredDate(); String strDate = ""; if(pickDate != null) { strDate = sdf.format(pickDate); } JSONParentNodeBuilder root = builder.rootNode(); root.val("warehouseCode", site.getAccountNo()); root.val("customerCode", req.getAccountNo()); root.val("customerName", req.getName()); root.val("deliveryCompanyCode", car.getAccountNo()); //need to confirm root.val("deliveryType", ssl.getTMSCode()); root.val("changingShippingOption", shipment.getChangeShippingOption()); root.val("orderNo", solh.getReferenceNo()); root.val("slipNo", solh.getOrderNo()); root.val("pickDate", strDate.concat(".000")); //CUSTOM - FASSTO - 178467 root.val("senderName", req.getName()); root.val("senderPhone", req.getPhoneNo()); if(con != null){ //root.val("senderPhoneEtc", con.getPhoneBus1()); } root.val("senderZipCode", add.getPostalCode()); root.val("senderAddress", add.getAddress1()); root.val("senderAddressDetail", add.getAddress2()); root.val("receiverName", shipment.getShipToName()); root.val("receiverPhone", shipment.getShipToPhoneNo()); //root.val("receiverPhoneEtc", shipment.getShipToPhoneNo2()); root.val("receiverZipCode", shipToAdd.getPostalCode()); root.val("receiverAddress", shipToAdd.getAddress1()); root.val("receiverAddressDetail", shipToAdd.getAddress2()); root.val("shipRequestMemo", shipment.getShipToInstruction()); root.val("entrancePassword", shipment.getShipToPassword()); StringBuilder sqlBoxes = new StringBuilder(); sqlBoxes.append("SELECT co, mm, floor(sum(coalesce(mi.Quantity,0))) "); sqlBoxes.append(" FROM PackingContainer co "); sqlBoxes.append(" INNER JOIN Material mi on mi.Container = co and mi.Status = 'ACTIVE'"); sqlBoxes.append(" INNER JOIN MaterialMaster mm on mi.MaterialMaster = mm "); sqlBoxes.append(" where co in (" + StringUtils.joinWithCommas(containers) + ") "); sqlBoxes.append(" GROUP BY FIELDS "); StringBuilder sqlBoxesPKLI = new StringBuilder(); sqlBoxesPKLI.append("SELECT co, mm, floor(sum(coalesce(pkli.Quantity,0))) "); sqlBoxesPKLI.append(" FROM PackingContainer co "); sqlBoxesPKLI.append(" INNER JOIN PKLI pkli on pkli.CurrentContainer = co "); sqlBoxesPKLI.append(" INNER JOIN MaterialMaster mm on pkli.MaterialMaster = mm "); sqlBoxesPKLI.append(" where co in (" + StringUtils.joinWithCommas(containers) + ") "); sqlBoxesPKLI.append(" GROUP BY FIELDS "); List<String[]> strs = t.getList(sqlBoxes.toString()); if(strs.isEmpty()){ strs = t.getList(sqlBoxesPKLI.toString()); } Map<Integer,Integer> QtyByCo = new HashMap<Integer, Integer>(); Map<Integer, Map<Integer,Integer>> QtyByMMByCo = new HashMap<Integer, Map<Integer, Integer>>(); if(!strs.isEmpty()){ for(String[] str : strs){ if(!StringUtils.isEqual(str[1],"")){ MaterialMaster mm = t.get(MaterialMaster.class, Integer.parseInt(str[1])); Map<Integer, Integer> QtyByMM = QtyByMMByCo.get(Integer.parseInt(str[0])); if(QtyByMM == null){ QtyByMM = new HashMap<Integer, Integer>(); } QtyByMM.put(Integer.parseInt(str[1]), Integer.parseInt(str[2])); //MM ,qty QtyByMMByCo.put(Integer.parseInt(str[0]), QtyByMM); //PC , QtyByMM } Integer qty = QtyByCo.get(Integer.parseInt(str[0])); if(qty == null){ qty = 0; } qty += Integer.parseInt(str[2]); QtyByCo.put(Integer.parseInt(str[0]),qty); } } else{ JSONParentNodeBuilder boxes = root.arr("boxes"); JSONParentNodeBuilder box = boxes.obj("Child1"); box.val("boxID", ""); box.val("type", ""); box.val("category", ""); box.val("productQty", ""); box.val("boxWidth", ""); box.val("boxHeight", ""); box.val("boxDepth", ""); box.val("boxWeight", ""); JSONParentNodeBuilder items = box.arr("items"); JSONParentNodeBuilder item = items.obj("Child1"); item.val("code", ""); item.val("qty", ""); } root.val("boxQty", QtyByCo.size()); int counter = 0; JSONParentNodeBuilder boxes = root.arr("boxes"); for(Integer pc_oid : QtyByCo.keySet()){ PackingContainer pc = t.get(PackingContainer.class, pc_oid); PackingContainerType pct = pc.getType(); JSONParentNodeBuilder box = boxes.obj("Child1"); box.val("boxID", pc); box.val("type", pct.getName()); String category = "";//149960 if(pct.getType() == PackingContainer_Class.CARTON || pct.getType() == PackingContainer_Class.SHIPPABLE){ category ="01"; }else if(pct.getType() == PackingContainer_Class.CUSTOMERCARTON){ category ="02"; }else if(pct.getType() == PackingContainer_Class.POLYBAG){ category ="03"; }else if(pct.getType() == PackingContainer_Class.CUSTOMERPOLYBAG){ category ="04"; }else if(pct.getType() == PackingContainer_Class.EPSSTYROFOAM){ category ="05"; }else if(pct.getType() == PackingContainer_Class.CUSTOMEREPSSTYROFOAM){ category ="06"; }else if(pct.getType() == PackingContainer_Class.PALLET){ category ="07"; } box.val("category", category); if(counter == 0 && !shipment.getSOLH().isFirstTrackingNumberRequested()){//CUSTOM FASSTO - 154088 box.val("invoiceNo", solh.getTrackingNumber()); } else{ box.val("invoiceNo", ""); } counter++; box.val("productQty", QtyByCo.get(pc_oid)); box.val("boxWidth", pc.getWidth().intValue()); box.val("boxHeight", pc.getHeight().intValue()); box.val("boxDepth", pc.getDepth().intValue()); box.val("boxWeight", pc.getWeight().intValue()); if(QtyByMMByCo.get(pc_oid) != null){ JSONParentNodeBuilder items = box.arr("items"); for(Integer mm_oid : QtyByMMByCo.get(pc_oid).keySet()){ MaterialMaster mm = t.get(MaterialMaster.class, mm_oid); JSONParentNodeBuilder item = items.obj("Child1"); item.val("code", mm.getPartNo()); item.val("qty", QtyByMMByCo.get(pc_oid).get(mm_oid)); } } } //END CUSTOM return null;
